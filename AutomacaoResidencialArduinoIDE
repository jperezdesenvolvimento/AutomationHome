//Código adaptado por José Carlos Perez.

#include <SPI.h>
#include <Ethernet.h>
#include <SD.h>
#define REQ_BUF_SZ   60

byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 0, 103);
EthernetServer server(80);  // criando o servidor na porta 80
File webFile;               // O arquivo Web no cartão SD
char HTTP_req[REQ_BUF_SZ] = {0};
char req_index = 0;
boolean LED_state[3] = {0}; // Armazena o status dos LEDs

void setup()
{
    pinMode(10, OUTPUT);
    digitalWrite(10, HIGH);
    
    Serial.begin(9600);
    
    // Inicializando o SD CARD
    Serial.println("Initializing SD card...");
    if (!SD.begin(4)) {
        Serial.println("ERRO - SD card falhou!");
        return; //Quando o inicio falhar
    }
    Serial.println("SUCCESS - SD card inicializado.");
    // checa se o index.htm existe
    if (!SD.exists("index.htm")) {
        Serial.println("ERRO - o arquivo index não foi encontrado!");
        return;
    }
    Serial.println("SUCCESS - Found index.htm file.");

    pinMode(2, INPUT);
    pinMode(3, INPUT);

    pinMode(5, OUTPUT);
    pinMode(6, OUTPUT);
    pinMode(7, OUTPUT);
    
    Ethernet.begin(mac, ip);  // Inicializando o dispositivo de rede
    server.begin();           // inicializando o cliente
}

void loop()
{
    EthernetClient client = server.available();

    if (client) {  // got client?
        boolean currentLineIsBlank = true;
        while (client.connected()) {
            if (client.available()) { 
                char c = client.read();

                if (req_index < (REQ_BUF_SZ - 1)) {
                    HTTP_req[req_index] = c;
                    req_index++;
                }
                
                if (c == '\n' && currentLineIsBlank) {

                    client.println("HTTP/1.1 200 OK");

                    if (StrContains(HTTP_req, "ajax_inputs")) {
                        // Envia a requisição para o HTM
                        client.println("Content-Type: text/xml");
                        client.println("Connection: keep-alive");
                        client.println();
                        SetLEDs();
                        // Responde para o cliente com um XML
                        XML_response(client);
                    }
                    else {  // Requisição da pagina web
                        client.println("Content-Type: text/html");
                        client.println("Connection: keep-alive");
                        client.println();

                        webFile = SD.open("index.htm");        //Abrindo web server
                        if (webFile) {
                            while(webFile.available()) {
                                client.write(webFile.read()); // Envia o web server para o cliente
                            }
                            webFile.close();
                        }
                    }

                    Serial.print(HTTP_req);
                    // reseta o buffer
                    req_index = 0;
                    StrClear(HTTP_req, REQ_BUF_SZ);
                    break;
                }

                if (c == '\n') {
                    currentLineIsBlank = true;
                } 
                else if (c != '\r') {
                    // verifica o caractere de texto recebido pelo cliente
                    currentLineIsBlank = false;
                }
            } // Fim do if (client.available())
        } // Fim do while (client.connected())
        delay(1);      // give the web browser time to receive the data
        client.flush();
        client.stop(); // close the connection
    } 

    ButtonDebounce();
}

void ButtonDebounce(void)
{

    static byte buttonState[2]     = {LOW, LOW};
    static byte lastButtonState[2] = {LOW, LOW};

    static long lastDebounceTime[2] = {0};
    long debounceDelay = 50;
  
    byte reading[2];
    
    reading[0] = digitalRead(2);
    reading[1] = digitalRead(3);
    
    for (int i = 0; i < 3; i++) {
        if (reading[i] != lastButtonState[i]) {
            // reset the debouncing timer
            lastDebounceTime[i] = millis();
        }
      
        if ((millis() - lastDebounceTime[i]) > debounceDelay) {
        
            if (reading[i] != buttonState[i]) {
                buttonState[i] = reading[i];
          
                if (buttonState[i] == HIGH) {
                    LED_state[i] = !LED_state[i];
                }
            }
        }
    } // Fim do loop
    
    // Setando os LEDS
    digitalWrite(5, LED_state[0]);
    digitalWrite(6, LED_state[1]);
    digitalWrite(7, LED_state[2]);
    
    lastButtonState[0] = reading[0];
    lastButtonState[1] = reading[1];
}

void SetLEDs(void)
{
    // PINO 5 - 2andar
    if (StrContains(HTTP_req, "LED1=1")) {
        LED_state[0] = 1;  // save LED state
        digitalWrite(5, HIGH);
    }
    else if (StrContains(HTTP_req, "LED1=0")) {
        LED_state[0] = 0;  // save LED state
        digitalWrite(5, LOW);
    }
    // PINO 6 - 1andar
    if (StrContains(HTTP_req, "LED2=1")) {
        LED_state[1] = 1;  // save LED state
        digitalWrite(6, HIGH);
    }
    else if (StrContains(HTTP_req, "LED2=0")) {
        LED_state[1] = 0;  // save LED state
        digitalWrite(6, LOW);
    }
    // PINO 7 - Terreo
    if (StrContains(HTTP_req, "LED3=1")) {
        LED_state[2] = 1;  // save LED state
        digitalWrite(7, HIGH);
    }
    else if (StrContains(HTTP_req, "LED3=0")) {
        LED_state[2] = 0;  // save LED state
        digitalWrite(7, LOW);
    }    
}

void XML_response(EthernetClient cl)
{
    int analog_val;
    int count;
    int sw_arr[] = {2, 3};
    
    cl.print("<?xml version = \"1.0\" ?>");
    cl.print("<inputs>");
   
    // LED1

    cl.print("<LED>");
    if (LED_state[0]) {
    cl.print("on");
    }
    else {
    cl.print("off");
    }
    cl.println("</LED>");
    
    // LED3
    cl.print("<LED>");
    if (LED_state[1]) {
        cl.print("on");
    }
    else {
        cl.print("off");
    }
    cl.println("</LED>");

    cl.print("<LED>");
    if (LED_state[2]) {
        cl.print("on");
    }
    else {
        cl.print("off");
    }
    cl.println("</LED>");
        
    cl.print("</inputs>");
}


void StrClear(char *str, char length)
{
    for (int i = 0; i < length; i++) {
        str[i] = 0;
    }
}

char StrContains(char *str, char *sfind)
{
    char found = 0;
    char index = 0;
    char len;

    len = strlen(str);
    
    if (strlen(sfind) > len) {
        return 0;
    }
    while (index < len) {
        if (str[index] == sfind[found]) {
            found++;
            if (strlen(sfind) == found) {
                return 1;
            }
        }
        else {
            found = 0;
        }
        index++;
    }
    return 0;
}
